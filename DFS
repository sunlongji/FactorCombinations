import java.util.*;

public class Solution {
	public List<List<Integer>> factorCombination(int n){
		List<List<Integer>> res=new ArrayList<List<Integer>>();
		List<Integer> list=new ArrayList<>();
		//dfs(n,2,list,res);
		dfsII(n,-1,list,res);
		return res;
	}
	private void dfs(int n, int start, List<Integer> list, List<List<Integer>> res){
		if(n==1&&list.size()>1){
			res.add(new ArrayList<Integer>(list));
			return;
		}
		for(int i=start;i<=n;i++){
			if(n%i==0){
				list.add(i);
				dfs(n/i,i,list,res);
				list.remove(list.size()-1);
			}
		}
	}
	public void dfsII(int n, int lower, List<Integer> cur, List<List<Integer>> result) {
	    if (lower != -1) {
	        cur.add(n);
	        result.add(new ArrayList<Integer>(cur));
	        cur.remove(cur.size() - 1);
	    }
	    for (int i = Math.max(2, lower); i*i<=n; ++i) {
	        if (n % i == 0) {
	            cur.add(i);
	            dfsII(n / i, i, cur, result);
	            cur.remove(cur.size() - 1);
	        }
	    }
	}
	public static void main(String[] args){
		List<List<Integer>> res=new ArrayList<>();
		int n=18;
		res=new Solution().factorCombination(n);
		for(List<Integer> list:res)
			System.out.println(Arrays.toString(list.toArray()));
	}
}
